{"version":3,"sources":["./node_modules/ngx-timer/__ivy_ngcc__/fesm2015/ngx-timer.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACwD;AAC3D;;AAE5C;AACA;AACA,cAAc,uFAAuF;AACrG;AACwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,+CAAU;AACjC,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT,wBAAwB,qDAAQ;AAChC;AACA;AACA,oEAAoE,yCAAyC;AAC7G,4BAA4B,gEAAyB,EAAE,oFAAoF;AAC3I;AACA;AACA,yDAAyD,sEAAgB,EAAE,kDAAkD,kCAAkC,EAAE,kDAAkD;AACnN,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;;AAE5C;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,wEAAwE,yCAAyC,+DAAwB,uBAAuB;AAChK,6BAA6B,+DAAwB,EAAE,uEAAuE,mEAAmE,kHAAkH;AACnT,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,oDAAa;AACrB,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,KAAK;AACL,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,+DAAwB;AAChC,QAAQ,uDAAgB;AACxB,QAAQ,gEAAyB;AACjC,QAAQ,uDAAgB;AACxB,QAAQ,+DAAwB;AAChC,QAAQ,uDAAgB;AACxB,QAAQ,gEAAyB;AACjC,QAAQ,uDAAgB;AACxB,QAAQ,+DAAwB;AAChC,QAAQ,uDAAgB;AACxB,QAAQ,+DAAwB;AAChC,KAAK,EAAE,gBAAgB;AACvB;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,0BAA0B,OAAO,mDAAK,EAAE;AACxC;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA,8GAA8G,gBAAgB,uCAAuC,+EAA+E,qBAAqB,eAAe,uCAAuC,mFAAmF,sBAAsB,kBAAkB,uCAAuC,qFAAqF;AACtjB;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,4BAA4B,EAAE,EAAE,GAAG;AAClE,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,uCAAuC,0DAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,+CAAU;AACjC,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT,wBAAwB,qDAAQ;AAChC;AACA;AACA,8DAA8D,sCAAsC;AACpG,yBAAyB,gEAAyB,EAAE,8EAA8E;AAClI;AACA;AACA,sDAAsD,sEAAgB,EAAE,+CAA+C,+BAA+B,EAAE,+CAA+C;AACvM,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;;AAE5C;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,oBAAoB;AACpJ,0BAA0B,+DAAwB,EAAE,oIAAoI,EAAE,gBAAgB;AAC1M;AACA;AACA,KAAK;AACL;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA,mHAAmH,gBAAgB,uCAAuC,+EAA+E,qBAAqB,eAAe,uCAAuC,mFAAmF,sBAAsB,kBAAkB,uCAAuC,qFAAqF,mBAAmB,sBAAsB,uCAAuC,6FAA6F;AACxuB;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,yBAAyB,EAAE,EAAE,QAAQ,EAAE;;AAEtE;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,sBAAsB,8DAAuB,EAAE,uBAAuB;AACtE,sBAAsB,8DAAuB,EAAE,8CAA8C,oCAAoC,EAAE;AACnI;AACA;AACA;AACA;AACA,YAAY,4DAAY;AACxB,YAAY;AACZ,cAAc,oDAAoD,gEAAyB,kBAAkB,4BAA4B,6EAA6E,EAAE,wBAAwB,SAAS,4DAAY,EAAE,EAAE,wBAAwB,6EAA6E,EAAE,EAAE,EAAE,EAAE;AACtX,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEyQ;;AAEzQ,qC","file":"default~design-details-design-details-module~permit-design-details-permit-design-details-module.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Injectable, Component, NgModule, Input, EventEmitter, defineInjectable } from '@angular/core';\nimport { Observable, interval } from 'rxjs';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport * as Éµngcc0 from '@angular/core';\nclass CountupTimerService {\r\n    constructor() {\r\n        //Init\r\n        this.timerValue = {\r\n            seconds: '00',\r\n            mins: '00',\r\n            hours: '00',\r\n        };\r\n        this.isTimerStart = false;\r\n        this.totalSeconds = 0;\r\n        this.currentOperationId = 0;\r\n        //start timer\r\n        this.startTimer = (/**\r\n         * @param {?=} startTime\r\n         * @return {?}\r\n         */\r\n        (startTime) => {\r\n            if (startTime) {\r\n                /** @type {?} */\r\n                let currentDate = new Date();\r\n                /** @type {?} */\r\n                let startedTime = new Date(startTime);\r\n                this.totalSeconds = Math.round((currentDate.getTime() - startedTime.getTime()) / 1000);\r\n            }\r\n            this.isTimerStart = true;\r\n            return true;\r\n        });\r\n        //end timer\r\n        this.pauseTimer = (/**\r\n         * @param {?=} startTime\r\n         * @param {?=} endTime\r\n         * @return {?}\r\n         */\r\n        (startTime, endTime) => {\r\n            if (startTime && endTime) {\r\n                /** @type {?} */\r\n                let endedDate = new Date(endTime);\r\n                /** @type {?} */\r\n                let startedTime = new Date(startTime);\r\n                this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\r\n            }\r\n            this.isTimerStart = false;\r\n            return false;\r\n        });\r\n        //reset Timer\r\n        this.stopTimer = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.isTimerStart = false;\r\n            this.totalSeconds = 0;\r\n        });\r\n        //get timer value Obj\r\n        this.getTimerValue = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            return new Observable((/**\r\n             * @param {?} obs\r\n             * @return {?}\r\n             */\r\n            obs => {\r\n                if (this.intervalSubscription) {\r\n                    this.intervalSubscription.unsubscribe();\r\n                }\r\n                this.intervalSubscription = this.interval.subscribe((/**\r\n                 * @param {?} int\r\n                 * @return {?}\r\n                 */\r\n                int => {\r\n                    if (this.isTimerStart) {\r\n                        ++this.totalSeconds;\r\n                        this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n                        /** @type {?} */\r\n                        let totalSecondsForMinutes = 0;\r\n                        totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n                        this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n                        this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n                        obs.next(this.timerValue);\r\n                        obs.complete();\r\n                    }\r\n                    else {\r\n                        if (this.totalSeconds > 0) {\r\n                            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n                            /** @type {?} */\r\n                            let totalSecondsForMinutes = 0;\r\n                            totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n                            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n                            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n                        }\r\n                        else {\r\n                            this.timerValue.hours = \"00\";\r\n                            this.timerValue.mins = \"00\";\r\n                            this.timerValue.seconds = \"00\";\r\n                        }\r\n                        obs.next(this.timerValue);\r\n                        obs.complete();\r\n                    }\r\n                }), (/**\r\n                 * @param {?} error\r\n                 * @return {?}\r\n                 */\r\n                error => {\r\n                    obs.error(error);\r\n                    obs.complete();\r\n                }));\r\n            }));\r\n        });\r\n        //set timer value\r\n        this.setTimervalue = (/**\r\n         * @param {?} val\r\n         * @return {?}\r\n         */\r\n        (val) => {\r\n            /** @type {?} */\r\n            let valString = val + \"\";\r\n            return (valString.length < 2) ? \"0\" + valString : valString;\r\n        });\r\n        this.interval = interval(1000);\r\n    }\r\n}\nCountupTimerService.Éµfac = function CountupTimerService_Factory(t) { return new (t || CountupTimerService)(); };\nCountupTimerService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: CountupTimerService, factory: CountupTimerService.Éµfac, providedIn: 'root' });\r\n/** @nocollapse */\r\nCountupTimerService.ctorParameters = () => [];\r\n/** @nocollapse */ CountupTimerService.ngInjectableDef = defineInjectable({ factory: function CountupTimerService_Factory() { return new CountupTimerService(); }, token: CountupTimerService, providedIn: \"root\" });\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(CountupTimerService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass countUpTimerConfigModel {\r\n}\r\nclass timerTexts {\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass CountupTimerComponent {\r\n    /**\r\n     * @param {?} countupTimerService\r\n     */\r\n    constructor(countupTimerService) {\r\n        this.countupTimerService = countupTimerService;\r\n        //Init\r\n        this.timerObj = {};\r\n        //get timer value\r\n        this.getTimerValue = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.timerSubscription = this.countupTimerService.getTimerValue().subscribe((/**\r\n             * @param {?} res\r\n             * @return {?}\r\n             */\r\n            res => {\r\n                this.timerObj = Object.assign(res);\r\n            }), (/**\r\n             * @param {?} error\r\n             * @return {?}\r\n             */\r\n            error => {\r\n                console.log(error);\r\n                console.log('Failed to get timer value');\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.getTimerValue();\r\n        this.timerConfig = new countUpTimerConfigModel();\r\n        this.timerTextConfig = new timerTexts();\r\n        this.timerConfig = this.countUpTimerConfig ? Object.assign(this.countUpTimerConfig) : null;\r\n        this.timerTextConfig = this.countUpTimerConfig && this.countUpTimerConfig.timerTexts ? Object.assign(this.countUpTimerConfig.timerTexts) : null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.timerSubscription.unsubscribe();\r\n    }\r\n}\nCountupTimerComponent.Éµfac = function CountupTimerComponent_Factory(t) { return new (t || CountupTimerComponent)(Éµngcc0.ÉµÉµdirectiveInject(CountupTimerService)); };\nCountupTimerComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: CountupTimerComponent, selectors: [[\"countup-timer\"]], inputs: { startTime: \"startTime\", countUpTimerConfig: \"countUpTimerConfig\" }, decls: 13, vars: 8, consts: [[1, \"time-category\"]], template: function CountupTimerComponent_Template(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµelementStart(0, \"div\");\n        Éµngcc0.ÉµÉµelementStart(1, \"span\");\n        Éµngcc0.ÉµÉµtext(2);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(3, \"span\", 0);\n        Éµngcc0.ÉµÉµtext(4);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(5, \"span\");\n        Éµngcc0.ÉµÉµtext(6);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(7, \"span\", 0);\n        Éµngcc0.ÉµÉµtext(8);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(9, \"span\");\n        Éµngcc0.ÉµÉµtext(10);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(11, \"span\", 0);\n        Éµngcc0.ÉµÉµtext(12);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementEnd();\n    } if (rf & 2) {\n        Éµngcc0.ÉµÉµclassMap((ctx.timerConfig == null ? null : ctx.timerConfig.timerClass) ? ctx.timerConfig.timerClass : \"\");\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate(ctx.timerObj.hours);\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate1(\"\", ctx.timerTextConfig && ctx.timerTextConfig.hourText ? ctx.timerTextConfig.hourText : \"hh\", \" \");\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate(ctx.timerObj.mins);\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate1(\"\", ctx.timerTextConfig && ctx.timerTextConfig.minuteText ? ctx.timerTextConfig.minuteText : \"mm\", \" \");\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate(ctx.timerObj.seconds);\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate(ctx.timerTextConfig && ctx.timerTextConfig.secondsText ? ctx.timerTextConfig.secondsText : \"ss\");\n    } }, styles: [\"\"] });\r\n/** @nocollapse */\r\nCountupTimerComponent.ctorParameters = () => [\r\n    { type: CountupTimerService }\r\n];\r\nCountupTimerComponent.propDecorators = {\r\n    startTime: [{ type: Input }],\r\n    countUpTimerConfig: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(CountupTimerComponent, [{\n        type: Component,\n        args: [{\n                selector: 'countup-timer',\n                template: \"<div [class]=\\\"timerConfig?.timerClass ? timerConfig.timerClass : ''\\\">\\n  <span>{{timerObj.hours}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.hourText ? timerTextConfig.hourText : 'hh'}} </span> \\n  <span>{{timerObj.mins}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.minuteText ? timerTextConfig.minuteText : 'mm'}}  </span> \\n  <span>{{timerObj.seconds}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.secondsText ? timerTextConfig.secondsText : 'ss'}}</span>\\n</div>\",\n                styles: [\"\"]\n            }]\n    }], function () { return [{ type: CountupTimerService }]; }, { startTime: [{\n            type: Input\n        }], countUpTimerConfig: [{\n            type: Input\n        }] }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass countDownTimerConfigModel {\r\n}\r\nclass countDownTimerTexts {\r\n}\r\n/** @enum {string} */\r\nconst TimerStaus = {\r\n    START: \"START\",\r\n    PAUSE: \"PAUSE\",\r\n    STOP: \"STOP\",\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass CountdownTimerService {\r\n    constructor() {\r\n        this.onTimerStatusChange = new EventEmitter();\r\n        //Init\r\n        this.timerValue = {\r\n            seconds: '00',\r\n            mins: '00',\r\n            hours: '00',\r\n        };\r\n        this.isTimerStart = false;\r\n        this.totalSeconds = 0;\r\n        this.currentOperationId = 0;\r\n        //start timer\r\n        this.startTimer = (/**\r\n         * @param {?} startTime\r\n         * @return {?}\r\n         */\r\n        (startTime) => {\r\n            if (startTime) {\r\n                /** @type {?} */\r\n                let currentDate = new Date();\r\n                /** @type {?} */\r\n                let startedTime = new Date(startTime);\r\n                this.totalSeconds = (Math.round((currentDate.getTime() - startedTime.getTime()) / 1000)) * -1;\r\n            }\r\n            this.isTimerStart = true;\r\n            this.onTimerStatusChange.emit(TimerStaus.START);\r\n            return true;\r\n        });\r\n        //end timer\r\n        this.pauseTimer = (/**\r\n         * @param {?=} startTime\r\n         * @param {?=} endTime\r\n         * @return {?}\r\n         */\r\n        (startTime, endTime) => {\r\n            if (startTime && endTime) {\r\n                /** @type {?} */\r\n                let endedDate = new Date(endTime);\r\n                /** @type {?} */\r\n                let startedTime = new Date(startTime);\r\n                this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\r\n            }\r\n            this.isTimerStart = false;\r\n            this.onTimerStatusChange.emit(TimerStaus.PAUSE);\r\n            return false;\r\n        });\r\n        //reset Timer\r\n        this.stopTimer = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.isTimerStart = false;\r\n            this.totalSeconds = 0;\r\n            this.onTimerStatusChange.emit(TimerStaus.STOP);\r\n        });\r\n        //resume Timer\r\n        this.resumeTimer = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.isTimerStart = true;\r\n        });\r\n        //get timer value Obj\r\n        this.getTimerValue = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            return new Observable((/**\r\n             * @param {?} obs\r\n             * @return {?}\r\n             */\r\n            obs => {\r\n                if (this.intervalSubscription) {\r\n                    this.intervalSubscription.unsubscribe();\r\n                }\r\n                this.intervalSubscription = this.interval.subscribe((/**\r\n                 * @param {?} int\r\n                 * @return {?}\r\n                 */\r\n                int => {\r\n                    if (this.isTimerStart && this.totalSeconds > 0) {\r\n                        --this.totalSeconds;\r\n                        this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n                        /** @type {?} */\r\n                        let totalSecondsForMinutes = 0;\r\n                        totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n                        this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n                        this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n                        obs.next(this.timerValue);\r\n                        obs.complete();\r\n                    }\r\n                    else {\r\n                        if (this.totalSeconds > 0) {\r\n                            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n                            /** @type {?} */\r\n                            let totalSecondsForMinutes = 0;\r\n                            totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n                            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n                            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n                        }\r\n                        else {\r\n                            this.timerValue.hours = \"00\";\r\n                            this.timerValue.mins = \"00\";\r\n                            this.timerValue.seconds = \"00\";\r\n                            this.stopTimer();\r\n                        }\r\n                        obs.next(this.timerValue);\r\n                        obs.complete();\r\n                    }\r\n                }), (/**\r\n                 * @param {?} error\r\n                 * @return {?}\r\n                 */\r\n                error => {\r\n                    obs.error(error);\r\n                    obs.complete();\r\n                }));\r\n            }));\r\n        });\r\n        //set timer value\r\n        this.setTimervalue = (/**\r\n         * @param {?} val\r\n         * @return {?}\r\n         */\r\n        (val) => {\r\n            /** @type {?} */\r\n            let valString = val + \"\";\r\n            return (valString.length < 2) ? \"0\" + valString : valString;\r\n        });\r\n        this.interval = interval(1000);\r\n    }\r\n}\nCountdownTimerService.Éµfac = function CountdownTimerService_Factory(t) { return new (t || CountdownTimerService)(); };\nCountdownTimerService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: CountdownTimerService, factory: CountdownTimerService.Éµfac, providedIn: 'root' });\r\n/** @nocollapse */\r\nCountdownTimerService.ctorParameters = () => [];\r\n/** @nocollapse */ CountdownTimerService.ngInjectableDef = defineInjectable({ factory: function CountdownTimerService_Factory() { return new CountdownTimerService(); }, token: CountdownTimerService, providedIn: \"root\" });\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(CountdownTimerService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass CountdownTimerComponent {\r\n    /**\r\n     * @param {?} countdownTimerService\r\n     */\r\n    constructor(countdownTimerService) {\r\n        this.countdownTimerService = countdownTimerService;\r\n        this.timerObj = {};\r\n        //get timer value\r\n        this.getTimerValue = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.timerSubscription = this.countdownTimerService.getTimerValue().subscribe((/**\r\n             * @param {?} res\r\n             * @return {?}\r\n             */\r\n            res => {\r\n                this.timerObj = Object.assign(res);\r\n            }), (/**\r\n             * @param {?} error\r\n             * @return {?}\r\n             */\r\n            error => {\r\n                console.log(error);\r\n                console.log('Failed to get timer value');\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.getTimerValue();\r\n        this.timerConfig = new countDownTimerConfigModel();\r\n        this.timerTextConfig = new countDownTimerTexts();\r\n        this.timerConfig = this.countDownTimerConfig ? Object.assign(this.countDownTimerConfig) : null;\r\n        this.timerTextConfig = this.countDownTimerConfig && this.countDownTimerConfig.timerTexts ? Object.assign(this.countDownTimerConfig.timerTexts) : null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.timerSubscription.unsubscribe();\r\n    }\r\n}\nCountdownTimerComponent.Éµfac = function CountdownTimerComponent_Factory(t) { return new (t || CountdownTimerComponent)(Éµngcc0.ÉµÉµdirectiveInject(CountdownTimerService)); };\nCountdownTimerComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: CountdownTimerComponent, selectors: [[\"countdown-timer\"]], inputs: { startTime: \"startTime\", countDownTimerConfig: \"countDownTimerConfig\" }, decls: 13, vars: 8, consts: [[1, \"time-category\"]], template: function CountdownTimerComponent_Template(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµelementStart(0, \"div\");\n        Éµngcc0.ÉµÉµelementStart(1, \"span\");\n        Éµngcc0.ÉµÉµtext(2);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(3, \"span\", 0);\n        Éµngcc0.ÉµÉµtext(4);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(5, \"span\");\n        Éµngcc0.ÉµÉµtext(6);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(7, \"span\", 0);\n        Éµngcc0.ÉµÉµtext(8);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(9, \"span\");\n        Éµngcc0.ÉµÉµtext(10);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementStart(11, \"span\", 0);\n        Éµngcc0.ÉµÉµtext(12);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementEnd();\n    } if (rf & 2) {\n        Éµngcc0.ÉµÉµclassMap((ctx.timerConfig == null ? null : ctx.timerConfig.timerClass) ? ctx.timerConfig.timerClass : \"\");\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate(ctx.timerObj.hours);\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate1(\"\", ctx.timerTextConfig && ctx.timerTextConfig.hourText ? ctx.timerTextConfig.hourText : \"hh\", \" \");\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate(ctx.timerObj.mins);\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate1(\"\", ctx.timerTextConfig && ctx.timerTextConfig.minuteText ? ctx.timerTextConfig.minuteText : \"mm\", \" \");\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate(ctx.timerObj.seconds);\n        Éµngcc0.ÉµÉµadvance(2);\n        Éµngcc0.ÉµÉµtextInterpolate(ctx.timerTextConfig && ctx.timerTextConfig.secondsText ? ctx.timerTextConfig.secondsText : \"ss\");\n    } }, styles: [\"\"] });\r\n/** @nocollapse */\r\nCountdownTimerComponent.ctorParameters = () => [\r\n    { type: CountdownTimerService }\r\n];\r\nCountdownTimerComponent.propDecorators = {\r\n    startTime: [{ type: Input }],\r\n    countDownTimerConfig: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(CountdownTimerComponent, [{\n        type: Component,\n        args: [{\n                selector: 'countdown-timer',\n                template: \"<div [class]=\\\"timerConfig?.timerClass ? timerConfig.timerClass : ''\\\">\\r\\n  <span>{{timerObj.hours}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.hourText ? timerTextConfig.hourText : 'hh'}} </span> \\r\\n  <span>{{timerObj.mins}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.minuteText ? timerTextConfig.minuteText : 'mm'}}  </span> \\r\\n  <span>{{timerObj.seconds}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.secondsText ? timerTextConfig.secondsText : 'ss'}}</span>\\r\\n</div>\",\n                styles: [\"\"]\n            }]\n    }], function () { return [{ type: CountdownTimerService }]; }, { startTime: [{\n            type: Input\n        }], countDownTimerConfig: [{\n            type: Input\n        }] }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass StopWatchService {\r\n    constructor() {\r\n        //Init\r\n        this.timerValue = {\r\n            miliseconds: '00',\r\n            seconds: '00',\r\n            mins: '00',\r\n            hours: '00',\r\n        };\r\n        this.isTimerStart = false;\r\n        this.totalSeconds = 0;\r\n        this.currentOperationId = 0;\r\n        //start timer\r\n        this.startTimer = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            debugger;\r\n            this.isTimerStart = true;\r\n            return true;\r\n        });\r\n        //end timer\r\n        this.pauseTimer = (/**\r\n         * @param {?=} startTime\r\n         * @param {?=} endTime\r\n         * @return {?}\r\n         */\r\n        (startTime, endTime) => {\r\n            if (startTime && endTime) {\r\n                /** @type {?} */\r\n                let endedDate = new Date(endTime);\r\n                /** @type {?} */\r\n                let startedTime = new Date(startTime);\r\n                this.totalSeconds = Math.round((endedDate.getTime() - startedTime.getTime()) / 1000);\r\n            }\r\n            this.isTimerStart = false;\r\n            return false;\r\n        });\r\n        //reset Timer\r\n        this.stopTimer = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.isTimerStart = false;\r\n            this.totalSeconds = 0;\r\n        });\r\n        //resume Timer\r\n        this.resumeTimer = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.isTimerStart = true;\r\n        });\r\n        //get timer value Obj\r\n        this.getTimerValue = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            return new Observable((/**\r\n             * @param {?} obs\r\n             * @return {?}\r\n             */\r\n            obs => {\r\n                if (this.intervalSubscription) {\r\n                    this.intervalSubscription.unsubscribe();\r\n                }\r\n                this.intervalSubscription = this.interval.subscribe((/**\r\n                 * @param {?} int\r\n                 * @return {?}\r\n                 */\r\n                int => {\r\n                    if (this.isTimerStart && this.totalSeconds > 0) {\r\n                        --this.totalSeconds;\r\n                        this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n                        /** @type {?} */\r\n                        let totalSecondsForMinutes = 0;\r\n                        totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n                        this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n                        this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n                        obs.next(this.timerValue);\r\n                        obs.complete();\r\n                    }\r\n                    else {\r\n                        if (this.totalSeconds > 0) {\r\n                            this.timerValue.seconds = this.setTimervalue(this.totalSeconds % 60);\r\n                            /** @type {?} */\r\n                            let totalSecondsForMinutes = 0;\r\n                            totalSecondsForMinutes = (Math.trunc(this.totalSeconds / 60) >= 60) ? (this.totalSeconds / 60) % 60 : this.totalSeconds / 60;\r\n                            this.timerValue.mins = this.setTimervalue(Math.trunc(totalSecondsForMinutes));\r\n                            this.timerValue.hours = this.setTimervalue(Math.trunc(this.totalSeconds / 3600));\r\n                        }\r\n                        else {\r\n                            this.timerValue.hours = \"00\";\r\n                            this.timerValue.mins = \"00\";\r\n                            this.timerValue.seconds = \"00\";\r\n                        }\r\n                        obs.next(this.timerValue);\r\n                        obs.complete();\r\n                    }\r\n                }), (/**\r\n                 * @param {?} error\r\n                 * @return {?}\r\n                 */\r\n                error => {\r\n                    obs.error(error);\r\n                    obs.complete();\r\n                }));\r\n            }));\r\n        });\r\n        //set timer value\r\n        this.setTimervalue = (/**\r\n         * @param {?} val\r\n         * @return {?}\r\n         */\r\n        (val) => {\r\n            /** @type {?} */\r\n            let valString = val + \"\";\r\n            return (valString.length < 2) ? \"0\" + valString : valString;\r\n        });\r\n        this.interval = interval(10000);\r\n    }\r\n}\nStopWatchService.Éµfac = function StopWatchService_Factory(t) { return new (t || StopWatchService)(); };\nStopWatchService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: StopWatchService, factory: StopWatchService.Éµfac, providedIn: 'root' });\r\n/** @nocollapse */\r\nStopWatchService.ctorParameters = () => [];\r\n/** @nocollapse */ StopWatchService.ngInjectableDef = defineInjectable({ factory: function StopWatchService_Factory() { return new StopWatchService(); }, token: StopWatchService, providedIn: \"root\" });\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(StopWatchService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass StopWatchComponent {\r\n    // timerConfig: countDownTimerConfigModel;\r\n    // timerTextConfig: countDownTimerTexts;\r\n    /**\r\n     * @param {?} countdownTimerService\r\n     */\r\n    constructor(countdownTimerService) {\r\n        this.countdownTimerService = countdownTimerService;\r\n        this.timerObj = {};\r\n        //get timer value\r\n        this.getTimerValue = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.timerSubscription = this.countdownTimerService.getTimerValue().subscribe((/**\r\n             * @param {?} res\r\n             * @return {?}\r\n             */\r\n            res => {\r\n                this.timerObj = Object.assign(res);\r\n            }), (/**\r\n             * @param {?} error\r\n             * @return {?}\r\n             */\r\n            error => {\r\n                console.log(error);\r\n                console.log('Failed to get timer value');\r\n            }));\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.getTimerValue();\r\n        // this.timerConfig = new countDownTimerConfigModel();\r\n        // this.timerTextConfig = new countDownTimerTexts();\r\n        // this.timerConfig = this.countDownTimerConfig ? Object.assign(this.countDownTimerConfig) : null;\r\n        // this.timerTextConfig = this.countDownTimerConfig && this.countDownTimerConfig.timerTexts ? Object.assign(this.countDownTimerConfig.timerTexts) :  null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.timerSubscription.unsubscribe();\r\n    }\r\n}\nStopWatchComponent.Éµfac = function StopWatchComponent_Factory(t) { return new (t || StopWatchComponent)(Éµngcc0.ÉµÉµdirectiveInject(StopWatchService)); };\nStopWatchComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: StopWatchComponent, selectors: [[\"stop-watch\"]], decls: 0, vars: 0, template: function StopWatchComponent_Template(rf, ctx) { }, styles: [\"\"] });\r\n/** @nocollapse */\r\nStopWatchComponent.ctorParameters = () => [\r\n    { type: StopWatchService }\r\n];\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(StopWatchComponent, [{\n        type: Component,\n        args: [{\n                selector: 'stop-watch',\n                template: \"<!-- <div [class]=\\\"timerConfig?.timerClass ? timerConfig.timerClass : ''\\\">\\n  <span>{{timerObj.hours}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.hourText ? timerTextConfig.hourText : 'hh'}} </span> \\n  <span>{{timerObj.mins}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.minuteText ? timerTextConfig.minuteText : 'mm'}}  </span> \\n  <span>{{timerObj.seconds}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.secondsText ? timerTextConfig.secondsText : 'ss'}}</span>\\n  <span>{{timerObj.miliseconds}}</span><span class=\\\"time-category\\\">{{timerTextConfig && timerTextConfig.milisecondsText ? timerTextConfig.milisecondsText : 'ss'}}</span>\\n</div> -->\",\n                styles: [\"\"]\n            }]\n    }], function () { return [{ type: StopWatchService }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxTimerModule {\r\n}\nNgxTimerModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: NgxTimerModule });\nNgxTimerModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function NgxTimerModule_Factory(t) { return new (t || NgxTimerModule)(); }, providers: [\n        CountupTimerService,\n        CountdownTimerService,\n        StopWatchService\n    ], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxTimerModule, { declarations: function () { return [CountupTimerComponent, CountdownTimerComponent, StopWatchComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CountupTimerComponent, CountdownTimerComponent, StopWatchComponent]; } }); })();\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxTimerModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CountupTimerComponent,\n                    CountdownTimerComponent,\n                    StopWatchComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [\n                    CountupTimerComponent,\n                    CountdownTimerComponent,\n                    StopWatchComponent\n                ],\n                entryComponents: [\n                    CountupTimerComponent,\n                    CountdownTimerComponent,\n                    StopWatchComponent\n                ],\n                providers: [\n                    CountupTimerService,\n                    CountdownTimerService,\n                    StopWatchService\n                ]\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxTimerModule, CountupTimerComponent, CountupTimerService, countUpTimerConfigModel, timerTexts, CountdownTimerComponent, CountdownTimerService, countDownTimerConfigModel, countDownTimerTexts, TimerStaus, StopWatchComponent as Éµa, StopWatchService as Éµb };\n\n//# sourceMappingURL=ngx-timer.js.map"],"sourceRoot":"webpack:///"}