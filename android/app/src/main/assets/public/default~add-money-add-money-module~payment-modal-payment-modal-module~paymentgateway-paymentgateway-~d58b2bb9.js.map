{"version":3,"sources":["./node_modules/ngx-paypal/__ivy_ngcc__/fesm2015/ngx-paypal.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC6G;AAC7H;;AAE/B;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACwC;;AAExC;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,+CAA+C,EAAE;AACjD;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,qCAAqC,EAAE;AACvC,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA,wDAAwD,iCAAiC,sDAAe,CAAC,oDAAa,GAAG;AACzH,sBAAsB,gEAAyB,EAAE,oDAAoD;AACrG;AACA;AACA,KAAK,OAAO,oDAAM;AAClB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,OAAO,oDAAa,EAAE,EAAE,EAAE,QAAQ,EAAE;AACnE,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+CAA+C,4BAA4B;AAC3E;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,wBAAwB;AAC/C,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB,GAAG,iBAAiB;AAClE;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC,sDAAe,iBAAiB;AAC3I,4BAA4B,gEAAyB,EAAE,gEAAgE;AACvH;AACA;AACA,KAAK;AACL;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB,KAAK,gBAAgB,UAAU,sBAAsB,EAAE,EAAE,QAAQ,EAAE;AACnE,WAAW,EAWV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,iCAAiC,qBAAqB;AACtD;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,uBAAuB,EAAE;AACzB,6EAA6E;AAC7E,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,gCAAgC;AAChC;A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,EAKV;AACD;AACA;AACA;AACA,kCAAkC;AAClC,WAAW,EAOV;AACD;AACA;AACA;AACA,qCAAqC;AACrC,WAAW,EAOV;AACD;AACA;AACA;AACA,mCAAmC;AACnC,WAAW,EAKV;AACD;AACA;AACA;AACA,mCAAmC;AACnC,WAAW,EAOV;AACD;AACA;AACA;AACA,wCAAwC;AACxC,WAAW,EAGV;AACD;AACA;AACA;AACA,gCAAgC;AAChC,WAAW,EAGV;AACD;AACA;AACA;AACA,sCAAsC;AACtC,WAAW,EAOV;AACD;AACA;AACA;AACA,mCAAmC;AACnC,WAAW,EAKV;AACD;AACA;AACA;AACA,+CAA+C;AAC/C,WAAW,EAGV;AACD;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,oCAAoC;AACpC,WAAW,EAKV;AACD;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAeV;AACD;AACA;AACA;AACA,gCAAgC;AAChC,WAAW,EASV;AACD;AACA;AACA;AACA,uCAAuC;AACvC,WAAW,EAKV;AACD;AACA;AACA;AACA,mBAAmB;AACnB,WAAW,EAeV;AACD;AACA;AACA;AACA,gCAAgC;AAChC,WAAW,EAiBV;AACD;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EAKV;AACD;AACA;AACA;AACA,mBAAmB;AACnB,WAAW,EAKV;AACD;AACA;AACA;AACA,qBAAqB;AACrB,WAAW,EAKV;AACD;AACA;AACA;AACA,yBAAyB;AACzB,WAAW,EAGV;AACD;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAqBV;AACD;AACA;AACA;AACA,mBAAmB;AACnB,WAAW,EAKV;AACD;AACA;AACA;AACA,iCAAiC;AACjC,WAAW,EAKV;AACD;AACA;AACA;AACA,yBAAyB;AACzB,WAAW,EAKV;AACD;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAeV;AACD;AACA;AACA;AACA,iBAAiB;AACjB,WAAW,EAKV;AACD;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAOV;AACD;AACA;AACA;AACA,mBAAmB;AACnB,WAAW,EAKV;AACD;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EAeV;AACD;AACA;AACA;AACA,uBAAuB;AACvB,WAAW,EAeV;AACD;AACA;AACA;AACA,6BAA6B;AAC7B,WAAW,EAaV;AACD;AACA;AACA;AACA,sBAAsB;AACtB,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;;AAEyF;;AAEzF,sC","file":"default~add-money-add-money-module~payment-modal-payment-modal-module~paymentgateway-paymentgateway-~d58b2bb9.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Injectable, NgZone, EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/script.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport * as Éµngcc0 from '@angular/core';\n\nconst _c0 = [\"payPalButtonContainer\"];\nclass ScriptService {\r\n    /**\r\n     * @param {?} zone\r\n     */\r\n    constructor(zone) {\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * @param {?} url\r\n     * @param {?} globalVar\r\n     * @param {?} onReady\r\n     * @return {?}\r\n     */\r\n    registerScript(url, globalVar, onReady) {\r\n        /** @type {?} */\r\n        const existingGlobalVar = ((/** @type {?} */ (window)))[globalVar];\r\n        if (existingGlobalVar) {\r\n            // global variable is present = script was already loaded\r\n            this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                onReady(existingGlobalVar);\r\n            }));\r\n            return;\r\n        }\r\n        // prepare script elem\r\n        /** @type {?} */\r\n        const scriptElem = document.createElement('script');\r\n        scriptElem.id = this.getElemId(globalVar);\r\n        scriptElem.innerHTML = '';\r\n        scriptElem.onload = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                onReady(((/** @type {?} */ (window)))[globalVar]);\r\n            }));\r\n        });\r\n        scriptElem.src = url;\r\n        scriptElem.async = true;\r\n        scriptElem.defer = true;\r\n        // add script to header\r\n        document.getElementsByTagName('head')[0].appendChild(scriptElem);\r\n    }\r\n    /**\r\n     * @param {?} globalVar\r\n     * @return {?}\r\n     */\r\n    cleanup(globalVar) {\r\n        // remove script from DOM\r\n        /** @type {?} */\r\n        const scriptElem = document.getElementById(this.getElemId(globalVar));\r\n        if (scriptElem) {\r\n            scriptElem.remove();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} globalVar\r\n     * @return {?}\r\n     */\r\n    getElemId(globalVar) {\r\n        return `ngx-paypal-script-elem-${globalVar}`;\r\n    }\r\n}\nScriptService.Éµfac = function ScriptService_Factory(t) { return new (t || ScriptService)(Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone)); };\nScriptService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: ScriptService, factory: ScriptService.Éµfac });\r\n/** @nocollapse */\r\nScriptService.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(ScriptService, [{\n        type: Injectable\n    }], function () { return [{ type: Éµngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    ScriptService.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/paypal-script.service.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass PayPalScriptService {\r\n    /**\r\n     * @param {?} scriptService\r\n     */\r\n    constructor(scriptService) {\r\n        this.scriptService = scriptService;\r\n        this.paypalWindowName = 'paypal';\r\n    }\r\n    /**\r\n     * @param {?} config\r\n     * @param {?} onReady\r\n     * @return {?}\r\n     */\r\n    registerPayPalScript(config, onReady) {\r\n        this.scriptService.registerScript(this.getUrlForConfig(config), this.paypalWindowName, onReady);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroyPayPalScript() {\r\n        this.scriptService.cleanup(this.paypalWindowName);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    getUrlForConfig(config) {\r\n        /** @type {?} */\r\n        const params = [\r\n            {\r\n                name: 'client-id',\r\n                value: config.clientId\r\n            }\r\n        ];\r\n        if (config.currency) {\r\n            params.push({\r\n                name: 'currency',\r\n                value: config.currency\r\n            });\r\n        }\r\n        if (config.commit) {\r\n            params.push({\r\n                name: 'commit',\r\n                value: config.commit\r\n            });\r\n        }\r\n        if (config.vault) {\r\n            params.push({\r\n                name: 'vault',\r\n                value: config.vault\r\n            });\r\n        }\r\n        if (config.extraParams) {\r\n            params.push(...config.extraParams);\r\n        }\r\n        return `https://www.paypal.com/sdk/js${this.getQueryString(params)}`;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} queryParams\r\n     * @return {?}\r\n     */\r\n    getQueryString(queryParams) {\r\n        /** @type {?} */\r\n        let queryString = '';\r\n        for (let i = 0; i < queryParams.length; i++) {\r\n            /** @type {?} */\r\n            const queryParam = queryParams[i];\r\n            if (i === 0) {\r\n                queryString += '?';\r\n            }\r\n            else {\r\n                queryString += '&';\r\n            }\r\n            queryString += `${queryParam.name}=${queryParam.value}`;\r\n        }\r\n        return queryString;\r\n    }\r\n}\nPayPalScriptService.Éµfac = function PayPalScriptService_Factory(t) { return new (t || PayPalScriptService)(Éµngcc0.ÉµÉµinject(ScriptService)); };\nPayPalScriptService.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: PayPalScriptService, factory: PayPalScriptService.Éµfac });\r\n/** @nocollapse */\r\nPayPalScriptService.ctorParameters = () => [\r\n    { type: ScriptService }\r\n];\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(PayPalScriptService, [{\n        type: Injectable\n    }], function () { return [{ type: ScriptService }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    PayPalScriptService.prototype.paypalWindowName;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    PayPalScriptService.prototype.scriptService;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/paypal.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPaypalComponent {\r\n    /**\r\n     * @param {?} paypalScriptService\r\n     * @param {?} cdr\r\n     * @param {?} ngZone\r\n     */\r\n    constructor(paypalScriptService, cdr, ngZone) {\r\n        this.paypalScriptService = paypalScriptService;\r\n        this.cdr = cdr;\r\n        this.ngZone = ngZone;\r\n        /**\r\n         * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n         * sharing base configuration. In such a case only a single component may register script.\r\n         */\r\n        this.registerScript = true;\r\n        /**\r\n         * Emitted when paypal script is loaded\r\n         */\r\n        this.scriptLoaded = new EventEmitter();\r\n        this.ngUnsubscribe = new Subject();\r\n        /**\r\n         * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n         */\r\n        this.initializePayPal = true;\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    set payPalButtonContainer(content) {\r\n        this.payPalButtonContainerElem = content;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (!this.payPalButtonContainerId) {\r\n            this.payPalButtonContainerId = this.generateElementId();\r\n        }\r\n        // first time config setup\r\n        /** @type {?} */\r\n        const config = this.config;\r\n        if (changes.config.isFirstChange()) {\r\n            if (config && this.registerScript) {\r\n                this.initPayPalScript(config, (/**\r\n                 * @param {?} payPal\r\n                 * @return {?}\r\n                 */\r\n                (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                }));\r\n            }\r\n        }\r\n        // changes to config\r\n        if (!changes.config.isFirstChange()) {\r\n            this.reinitialize(config);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.ngUnsubscribe.next();\r\n        this.ngUnsubscribe.complete();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this.doPayPalCheck();\r\n    }\r\n    /**\r\n     * @param {?} payPal\r\n     * @return {?}\r\n     */\r\n    customInit(payPal) {\r\n        this.payPal = payPal;\r\n        this.doPayPalCheck();\r\n    }\r\n    /**\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    reinitialize(config) {\r\n        this.config = config;\r\n        this.payPal = undefined;\r\n        this.paypalScriptService.destroyPayPalScript();\r\n        this.payPalButtonContainerId = this.generateElementId();\r\n        this.initializePayPal = true;\r\n        if (this.payPalButtonContainerElem) {\r\n            while (this.payPalButtonContainerElem.nativeElement.firstChild) {\r\n                this.payPalButtonContainerElem.nativeElement.removeChild(this.payPalButtonContainerElem.nativeElement.firstChild);\r\n            }\r\n        }\r\n        this.cdr.detectChanges();\r\n        if (this.config) {\r\n            if (!this.payPal) {\r\n                this.initPayPalScript(this.config, (/**\r\n                 * @param {?} payPal\r\n                 * @return {?}\r\n                 */\r\n                (payPal) => {\r\n                    // store reference to paypal global script\r\n                    this.payPal = payPal;\r\n                    this.doPayPalCheck();\r\n                }));\r\n            }\r\n            else {\r\n                this.doPayPalCheck();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    doPayPalCheck() {\r\n        if (this.initializePayPal && this.config && this.payPal && this.payPalButtonContainerElem) {\r\n            // make sure that id is also set\r\n            if (this.payPalButtonContainerElem.nativeElement.id) {\r\n                this.initializePayPal = false;\r\n                this.initPayPal(this.config, this.payPal);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} config\r\n     * @param {?} initPayPal\r\n     * @return {?}\r\n     */\r\n    initPayPalScript(config, initPayPal) {\r\n        this.paypalScriptService.registerPayPalScript({\r\n            clientId: config.clientId,\r\n            commit: config.advanced && config.advanced.commit ? config.advanced.commit : undefined,\r\n            currency: config.currency,\r\n            vault: config.vault,\r\n            extraParams: config.advanced && config.advanced.extraQueryParams ? config.advanced.extraQueryParams : []\r\n        }, (/**\r\n         * @param {?} paypal\r\n         * @return {?}\r\n         */\r\n        (paypal) => {\r\n            this.scriptLoaded.next(paypal);\r\n            initPayPal(paypal);\r\n        }));\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    generateElementId() {\r\n        return `ngx-captcha-id-${new Date().valueOf()}`;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} config\r\n     * @param {?} paypal\r\n     * @return {?}\r\n     */\r\n    initPayPal(config, paypal) {\r\n        // Running outside angular zone prevents infinite ngDoCheck lifecycle calls\r\n        this.ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // https://developer.paypal.com/docs/checkout/integrate/#2-add-the-paypal-script-to-your-web-page\r\n            /** @type {?} */\r\n            const createOrder = (/**\r\n             * @param {?} data\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            (data, actions) => {\r\n                return this.ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    if (config.createOrderOnClient && config.createOrderOnServer) {\r\n                        throw Error(`Both 'createOrderOnClient' and 'createOrderOnServer' are defined.\r\n                    Please choose one or the other.`);\r\n                    }\r\n                    if (!config.createOrderOnClient && !config.createOrderOnServer) {\r\n                        throw Error(`Neither 'createOrderOnClient' or 'createOrderOnServer' are defined.\r\n                    Please define one of these to create order.`);\r\n                    }\r\n                    if (config.createOrderOnClient) {\r\n                        return actions.order.create(config.createOrderOnClient(data));\r\n                    }\r\n                    if (config.createOrderOnServer) {\r\n                        return config.createOrderOnServer(data);\r\n                    }\r\n                    throw Error(`Invalid state for 'createOrder'.`);\r\n                }));\r\n            });\r\n            /** @type {?} */\r\n            const createSubscription = (/**\r\n             * @param {?} data\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            (data, actions) => {\r\n                return this.ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    if (config.createSubscription) {\r\n                        return config.createSubscription(data, actions);\r\n                    }\r\n                }));\r\n            });\r\n            /** @type {?} */\r\n            const onShippingChange = (/**\r\n             * @param {?} data\r\n             * @param {?} actions\r\n             * @return {?}\r\n             */\r\n            (data, actions) => {\r\n                return this.ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    if (config.onShippingChange) {\r\n                        return config.onShippingChange(data, actions);\r\n                    }\r\n                }));\r\n            });\r\n            /** @type {?} */\r\n            const buttonsConfig = Object.assign(Object.assign(Object.assign({ style: config.style, onApprove: (/**\r\n                 * @param {?} data\r\n                 * @param {?} actions\r\n                 * @return {?}\r\n                 */\r\n                (data, actions) => {\r\n                    return this.ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => {\r\n                        if (config.onApprove) {\r\n                            config.onApprove(data, actions);\r\n                        }\r\n                        // capture on server\r\n                        if (config.authorizeOnServer) {\r\n                            return config.authorizeOnServer(data, actions);\r\n                        }\r\n                        // capture on client\r\n                        /** @type {?} */\r\n                        const onClientAuthorization = config.onClientAuthorization;\r\n                        if (onClientAuthorization) {\r\n                            actions.order.capture().then((/**\r\n                             * @param {?} details\r\n                             * @return {?}\r\n                             */\r\n                            (details) => {\r\n                                this.ngZone.run((/**\r\n                                 * @return {?}\r\n                                 */\r\n                                () => {\r\n                                    onClientAuthorization(details);\r\n                                }));\r\n                            }));\r\n                            return;\r\n                        }\r\n                    }));\r\n                }), onError: (/**\r\n                 * @param {?} error\r\n                 * @return {?}\r\n                 */\r\n                (error) => {\r\n                    this.ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => {\r\n                        if (config.onError) {\r\n                            config.onError(error);\r\n                        }\r\n                    }));\r\n                }), onCancel: (/**\r\n                 * @param {?} data\r\n                 * @param {?} actions\r\n                 * @return {?}\r\n                 */\r\n                (data, actions) => {\r\n                    this.ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => {\r\n                        if (config.onCancel) {\r\n                            config.onCancel(data, actions);\r\n                        }\r\n                    }));\r\n                }), onClick: (/**\r\n                 * @param {?} data\r\n                 * @param {?} actions\r\n                 * @return {?}\r\n                 */\r\n                (data, actions) => {\r\n                    this.ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => {\r\n                        if (config.onClick) {\r\n                            config.onClick(data, actions);\r\n                        }\r\n                    }));\r\n                }), onInit: (/**\r\n                 * @param {?} data\r\n                 * @param {?} actions\r\n                 * @return {?}\r\n                 */\r\n                (data, actions) => {\r\n                    this.ngZone.run((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => {\r\n                        if (config.onInit) {\r\n                            config.onInit(data, actions);\r\n                        }\r\n                    }));\r\n                }) }, ((config.createOrderOnClient || config.createOrderOnServer) && { createOrder })), (config.createSubscription && { createSubscription })), (config.onShippingChange && { onShippingChange }));\r\n            paypal.Buttons(buttonsConfig).render(`#${this.payPalButtonContainerId}`);\r\n        }));\r\n    }\r\n}\nNgxPaypalComponent.Éµfac = function NgxPaypalComponent_Factory(t) { return new (t || NgxPaypalComponent)(Éµngcc0.ÉµÉµdirectiveInject(PayPalScriptService), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ChangeDetectorRef), Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone)); };\nNgxPaypalComponent.Éµcmp = Éµngcc0.ÉµÉµdefineComponent({ type: NgxPaypalComponent, selectors: [[\"ngx-paypal\"]], viewQuery: function NgxPaypalComponent_Query(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµviewQuery(_c0, true);\n    } if (rf & 2) {\n        let _t;\n        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.payPalButtonContainer = _t.first);\n    } }, inputs: { registerScript: \"registerScript\", config: \"config\" }, outputs: { scriptLoaded: \"scriptLoaded\" }, features: [Éµngcc0.ÉµÉµNgOnChangesFeature], decls: 2, vars: 1, consts: [[3, \"id\"], [\"payPalButtonContainer\", \"\"]], template: function NgxPaypalComponent_Template(rf, ctx) { if (rf & 1) {\n        Éµngcc0.ÉµÉµelement(0, \"div\", 0, 1);\n    } if (rf & 2) {\n        Éµngcc0.ÉµÉµproperty(\"id\", ctx.payPalButtonContainerId);\n    } }, encapsulation: 2, changeDetection: 0 });\r\n/** @nocollapse */\r\nNgxPaypalComponent.ctorParameters = () => [\r\n    { type: PayPalScriptService },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgZone }\r\n];\r\nNgxPaypalComponent.propDecorators = {\r\n    config: [{ type: Input }],\r\n    registerScript: [{ type: Input }],\r\n    scriptLoaded: [{ type: Output }],\r\n    payPalButtonContainer: [{ type: ViewChild, args: ['payPalButtonContainer', { static: false },] }]\r\n};\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxPaypalComponent, [{\n        type: Component,\n        args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                selector: 'ngx-paypal',\n                template: `\r\n    <div #payPalButtonContainer [id]=\"payPalButtonContainerId\"></div>\r\n    `\n            }]\n    }], function () { return [{ type: PayPalScriptService }, { type: Éµngcc0.ChangeDetectorRef }, { type: Éµngcc0.NgZone }]; }, { registerScript: [{\n            type: Input\n        }], scriptLoaded: [{\n            type: Output\n        }], payPalButtonContainer: [{\n            type: ViewChild,\n            args: ['payPalButtonContainer', { static: false }]\n        }], config: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * Configuration for paypal.\r\n     * @type {?}\r\n     */\r\n    NgxPaypalComponent.prototype.config;\r\n    /**\r\n     * If enabled, paypal SDK script will be loaded. Useful if you want to have multiple PayPal components on the same page\r\n     * sharing base configuration. In such a case only a single component may register script.\r\n     * @type {?}\r\n     */\r\n    NgxPaypalComponent.prototype.registerScript;\r\n    /**\r\n     * Emitted when paypal script is loaded\r\n     * @type {?}\r\n     */\r\n    NgxPaypalComponent.prototype.scriptLoaded;\r\n    /**\r\n     * Id of the element where PayPal button will be rendered\r\n     * @type {?}\r\n     */\r\n    NgxPaypalComponent.prototype.payPalButtonContainerId;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxPaypalComponent.prototype.ngUnsubscribe;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxPaypalComponent.prototype.payPalButtonContainerElem;\r\n    /**\r\n     * Flag that indicates if paypal should be initialized (required for handling script load events and availability of DOM element)\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxPaypalComponent.prototype.initializePayPal;\r\n    /**\r\n     * Reference to PayPal global API\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxPaypalComponent.prototype.payPal;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxPaypalComponent.prototype.paypalScriptService;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxPaypalComponent.prototype.cdr;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxPaypalComponent.prototype.ngZone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/ngx-paypal.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPayPalModule {\r\n}\nNgxPayPalModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: NgxPayPalModule });\nNgxPayPalModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function NgxPayPalModule_Factory(t) { return new (t || NgxPayPalModule)(); }, providers: [\n        ScriptService,\n        PayPalScriptService\n    ], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxPayPalModule, { declarations: function () { return [NgxPaypalComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxPaypalComponent]; } }); })();\n/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(NgxPayPalModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    NgxPaypalComponent,\n                ],\n                exports: [\n                    NgxPaypalComponent,\n                ],\n                providers: [\n                    ScriptService,\n                    PayPalScriptService\n                ]\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/paypal-models.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @record\r\n */\r\nfunction IPayPalConfig() { }\r\nif (false) {\r\n    /**\r\n     * Currency - Defaults to USD if not provided\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.currency;\r\n    /**\r\n     * Use when creating order on client\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.createOrderOnClient;\r\n    /**\r\n     * Use for creating orders on server. PayPal expects you to return 'orderId' in this method\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.createOrderOnServer;\r\n    /**\r\n     * Advanced configuration\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.advanced;\r\n    /**\r\n     * Client id\r\n     * @type {?}\r\n     */\r\n    IPayPalConfig.prototype.clientId;\r\n    /**\r\n     * Shipping callback\r\n     * see https://developer.paypal.com/docs/checkout/integration-features/shipping-callback/\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.onShippingChange;\r\n    /**\r\n     * Called when 'onApprove' event occurs\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.onApprove;\r\n    /**\r\n     * Called when authorization on client succeeds\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.onClientAuthorization;\r\n    /**\r\n     * Implement for authorizing on server side\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.authorizeOnServer;\r\n    /**\r\n     * Button style configuration\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.style;\r\n    /**\r\n     * Error handler\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.onError;\r\n    /**\r\n     * Click handler\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.onClick;\r\n    /**\r\n     * Cancel handler\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.onCancel;\r\n    /**\r\n     * Init handler.\r\n     * can be used for validation, see: https://developer.paypal.com/docs/checkout/integration-features/validation/#\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.onInit;\r\n    /**\r\n     * Create subscription handler\r\n     * https://developer.paypal.com/docs/subscriptions/integrate/\r\n     *\r\n     * Note: the vault property in the advanced configuration also has to be set to true\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.createSubscription;\r\n    /**\r\n     * Vault - must be set to true when creating subscriptions\r\n     * @type {?|undefined}\r\n     */\r\n    IPayPalConfig.prototype.vault;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPayPalUrlConfig() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IPayPalUrlConfig.prototype.clientId;\r\n    /** @type {?|undefined} */\r\n    IPayPalUrlConfig.prototype.currency;\r\n    /** @type {?|undefined} */\r\n    IPayPalUrlConfig.prototype.commit;\r\n    /** @type {?|undefined} */\r\n    IPayPalUrlConfig.prototype.vault;\r\n    /** @type {?|undefined} */\r\n    IPayPalUrlConfig.prototype.extraParams;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IOrderDetails() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IOrderDetails.prototype.create_time;\r\n    /** @type {?} */\r\n    IOrderDetails.prototype.update_time;\r\n    /** @type {?} */\r\n    IOrderDetails.prototype.id;\r\n    /** @type {?} */\r\n    IOrderDetails.prototype.intent;\r\n    /** @type {?} */\r\n    IOrderDetails.prototype.payer;\r\n    /** @type {?} */\r\n    IOrderDetails.prototype.status;\r\n    /** @type {?} */\r\n    IOrderDetails.prototype.links;\r\n    /** @type {?} */\r\n    IOrderDetails.prototype.purchase_units;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IClientAuthorizeCallbackData() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IClientAuthorizeCallbackData.prototype.links;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ILinkDescription() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ILinkDescription.prototype.href;\r\n    /** @type {?} */\r\n    ILinkDescription.prototype.rel;\r\n    /** @type {?|undefined} */\r\n    ILinkDescription.prototype.method;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IQueryParam() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IQueryParam.prototype.name;\r\n    /** @type {?} */\r\n    IQueryParam.prototype.value;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IOnShippingChangeData() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IOnShippingChangeData.prototype.paymentToken;\r\n    /** @type {?} */\r\n    IOnShippingChangeData.prototype.shipping_address;\r\n    /** @type {?|undefined} */\r\n    IOnShippingChangeData.prototype.selected_shipping_method;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IOnShippingChangeActions() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IOnShippingChangeActions.prototype.resolve;\r\n    /** @type {?} */\r\n    IOnShippingChangeActions.prototype.reject;\r\n    /** @type {?} */\r\n    IOnShippingChangeActions.prototype.patch;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IAdvancedConfiguration() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IAdvancedConfiguration.prototype.commit;\r\n    /** @type {?|undefined} */\r\n    IAdvancedConfiguration.prototype.extraQueryParams;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IOnApproveCallbackData() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IOnApproveCallbackData.prototype.orderID;\r\n    /** @type {?} */\r\n    IOnApproveCallbackData.prototype.payerID;\r\n    /** @type {?} */\r\n    IOnApproveCallbackData.prototype.subscriptionID;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ICreateOrderCallbackActions() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ICreateOrderCallbackActions.prototype.order;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ICancelCallbackData() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ICancelCallbackData.prototype.orderID;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IOnApproveCallbackActions() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IOnApproveCallbackActions.prototype.redirect;\r\n    /** @type {?} */\r\n    IOnApproveCallbackActions.prototype.restart;\r\n    /** @type {?} */\r\n    IOnApproveCallbackActions.prototype.order;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IOnInitCallbackActions() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IOnInitCallbackActions.prototype.enable;\r\n    /** @type {?} */\r\n    IOnInitCallbackActions.prototype.disable;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ICreateSubscriptionCallbackActions() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ICreateSubscriptionCallbackActions.prototype.subscription;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IInitCallbackData() { }\r\n/**\r\n * @record\r\n */\r\nfunction ICreateSubscriptionCallbackData() { }\r\n/**\r\n * @record\r\n */\r\nfunction IOnClickCallbackActions() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IOnClickCallbackActions.prototype.resolve;\r\n    /** @type {?} */\r\n    IOnClickCallbackActions.prototype.reject;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPayPalButtonStyle() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IPayPalButtonStyle.prototype.label;\r\n    /** @type {?|undefined} */\r\n    IPayPalButtonStyle.prototype.size;\r\n    /** @type {?|undefined} */\r\n    IPayPalButtonStyle.prototype.shape;\r\n    /** @type {?|undefined} */\r\n    IPayPalButtonStyle.prototype.color;\r\n    /** @type {?|undefined} */\r\n    IPayPalButtonStyle.prototype.layout;\r\n    /** @type {?|undefined} */\r\n    IPayPalButtonStyle.prototype.tagline;\r\n    /** @type {?|undefined} */\r\n    IPayPalButtonStyle.prototype.height;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ICreateOrderRequest() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ICreateOrderRequest.prototype.intent;\r\n    /** @type {?} */\r\n    ICreateOrderRequest.prototype.purchase_units;\r\n    /** @type {?|undefined} */\r\n    ICreateOrderRequest.prototype.payer;\r\n    /** @type {?|undefined} */\r\n    ICreateOrderRequest.prototype.application_context;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ICreateSubscriptionRequest() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ICreateSubscriptionRequest.prototype.plan_id;\r\n    /** @type {?|undefined} */\r\n    ICreateSubscriptionRequest.prototype.quantity;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPayer() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IPayer.prototype.name;\r\n    /** @type {?|undefined} */\r\n    IPayer.prototype.email_address;\r\n    /** @type {?|undefined} */\r\n    IPayer.prototype.payer_id;\r\n    /** @type {?|undefined} */\r\n    IPayer.prototype.birth_date;\r\n    /** @type {?|undefined} */\r\n    IPayer.prototype.tax_info;\r\n    /** @type {?|undefined} */\r\n    IPayer.prototype.address;\r\n    /** @type {?|undefined} */\r\n    IPayer.prototype.phone;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IApplicationContext() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IApplicationContext.prototype.brand_name;\r\n    /** @type {?|undefined} */\r\n    IApplicationContext.prototype.locale;\r\n    /** @type {?|undefined} */\r\n    IApplicationContext.prototype.landing_page;\r\n    /** @type {?|undefined} */\r\n    IApplicationContext.prototype.shipping_preference;\r\n    /** @type {?|undefined} */\r\n    IApplicationContext.prototype.user_action;\r\n    /** @type {?|undefined} */\r\n    IApplicationContext.prototype.payment_method;\r\n    /** @type {?|undefined} */\r\n    IApplicationContext.prototype.return_url;\r\n    /** @type {?|undefined} */\r\n    IApplicationContext.prototype.cancel_url;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPaymentMethod() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IPaymentMethod.prototype.payer_selected;\r\n    /** @type {?|undefined} */\r\n    IPaymentMethod.prototype.payee_preferred;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPhone() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IPhone.prototype.phone_type;\r\n    /** @type {?|undefined} */\r\n    IPhone.prototype.phone_number;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ITaxInfo() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ITaxInfo.prototype.tax_id;\r\n    /** @type {?} */\r\n    ITaxInfo.prototype.tax_id_type;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPhoneNumber() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IPhoneNumber.prototype.national_number;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPurchaseUnit() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IPurchaseUnit.prototype.amount;\r\n    /** @type {?|undefined} */\r\n    IPurchaseUnit.prototype.reference_id;\r\n    /** @type {?|undefined} */\r\n    IPurchaseUnit.prototype.payee;\r\n    /** @type {?|undefined} */\r\n    IPurchaseUnit.prototype.payment_instruction;\r\n    /** @type {?|undefined} */\r\n    IPurchaseUnit.prototype.description;\r\n    /** @type {?|undefined} */\r\n    IPurchaseUnit.prototype.custom_id;\r\n    /** @type {?|undefined} */\r\n    IPurchaseUnit.prototype.invoice_id;\r\n    /** @type {?|undefined} */\r\n    IPurchaseUnit.prototype.soft_descriptor;\r\n    /** @type {?} */\r\n    IPurchaseUnit.prototype.items;\r\n    /** @type {?|undefined} */\r\n    IPurchaseUnit.prototype.shipping;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPayee() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IPayee.prototype.email_address;\r\n    /** @type {?|undefined} */\r\n    IPayee.prototype.merchant_id;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPaymentInstructions() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IPaymentInstructions.prototype.platform_fees;\r\n    /** @type {?|undefined} */\r\n    IPaymentInstructions.prototype.disbursement_mode;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPlatformFee() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IPlatformFee.prototype.amount;\r\n    /** @type {?|undefined} */\r\n    IPlatformFee.prototype.payee;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ITransactionItem() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ITransactionItem.prototype.name;\r\n    /** @type {?} */\r\n    ITransactionItem.prototype.unit_amount;\r\n    /** @type {?} */\r\n    ITransactionItem.prototype.quantity;\r\n    /** @type {?|undefined} */\r\n    ITransactionItem.prototype.description;\r\n    /** @type {?|undefined} */\r\n    ITransactionItem.prototype.sku;\r\n    /** @type {?|undefined} */\r\n    ITransactionItem.prototype.category;\r\n    /** @type {?|undefined} */\r\n    ITransactionItem.prototype.tax;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction ITax() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    ITax.prototype.currency_code;\r\n    /** @type {?} */\r\n    ITax.prototype.value;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IUnitAmount() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IUnitAmount.prototype.currency_code;\r\n    /** @type {?} */\r\n    IUnitAmount.prototype.value;\r\n    /** @type {?|undefined} */\r\n    IUnitAmount.prototype.breakdown;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IMoney() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IMoney.prototype.currency_code;\r\n    /** @type {?} */\r\n    IMoney.prototype.value;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IUnitBreakdown() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IUnitBreakdown.prototype.item_total;\r\n    /** @type {?|undefined} */\r\n    IUnitBreakdown.prototype.shipping;\r\n    /** @type {?|undefined} */\r\n    IUnitBreakdown.prototype.handling;\r\n    /** @type {?|undefined} */\r\n    IUnitBreakdown.prototype.tax_total;\r\n    /** @type {?|undefined} */\r\n    IUnitBreakdown.prototype.insurance;\r\n    /** @type {?|undefined} */\r\n    IUnitBreakdown.prototype.shipping_discount;\r\n    /** @type {?|undefined} */\r\n    IUnitBreakdown.prototype.discount;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IPartyName() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IPartyName.prototype.prefix;\r\n    /** @type {?|undefined} */\r\n    IPartyName.prototype.given_name;\r\n    /** @type {?|undefined} */\r\n    IPartyName.prototype.surname;\r\n    /** @type {?|undefined} */\r\n    IPartyName.prototype.middle_name;\r\n    /** @type {?|undefined} */\r\n    IPartyName.prototype.suffix;\r\n    /** @type {?|undefined} */\r\n    IPartyName.prototype.alternate_full_name;\r\n    /** @type {?|undefined} */\r\n    IPartyName.prototype.full_name;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IAddressPortable() { }\r\nif (false) {\r\n    /** @type {?} */\r\n    IAddressPortable.prototype.country_code;\r\n    /** @type {?|undefined} */\r\n    IAddressPortable.prototype.address_line_1;\r\n    /** @type {?|undefined} */\r\n    IAddressPortable.prototype.address_line_2;\r\n    /** @type {?|undefined} */\r\n    IAddressPortable.prototype.admin_area_2;\r\n    /** @type {?|undefined} */\r\n    IAddressPortable.prototype.admin_area_1;\r\n    /** @type {?|undefined} */\r\n    IAddressPortable.prototype.postal_code;\r\n}\r\n/**\r\n * @record\r\n */\r\nfunction IShipping() { }\r\nif (false) {\r\n    /** @type {?|undefined} */\r\n    IShipping.prototype.name;\r\n    /** @type {?|undefined} */\r\n    IShipping.prototype.address;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public_api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: ngx-paypal.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxPayPalModule, NgxPaypalComponent, PayPalScriptService, ScriptService as Éµa };\n\n//# sourceMappingURL=ngx-paypal.js.map"],"sourceRoot":"webpack:///"}